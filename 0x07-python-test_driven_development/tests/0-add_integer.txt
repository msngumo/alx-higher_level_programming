The ``0-add_integer `` module
===============================

Usage ``add_integer``
__________________________________

This a 0-add_integer text file

>>> add_integer = __import__('0-add_integer').add_integer

Testing normal case
::
	>>> add_integer(3, 4)
	7

Testing for empty function
::
	>>> add_integer()
	Traceback (most recent call last):
	TypeError: add_integer() missing 1 required positional argument: 'a'
									  
Testing with only one integer
::
	>>> add_integer(20)
	118

Testing with (a) as a string
::
	>>> add_integer("hello", "Joy")
	Traceback (most recent call last):
	TypeError: a must be an integer

Testing with (b) as a string
::
	>>> add_integer(8, "Joy")
	Traceback (most recent call last):
	TypeError: b must be an integer

Testing with a negative number
::
	>>> add_integer(-1)
	97

Testing with b as a -ve number
::
	>>> add_integer(9, -1)
	8

Testing with a as None
::
	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

Testing with b as None
::
	>>> add_integer(97, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

Testing with a unnamed variable
::
	>>> add_integer(NaN)
	Traceback (most recent call last):
	NameError: name 'NaN' is not defined

Testing with Nan
::
	>>> add_integer(float("NaN"))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

Testing with Infinity
::
	>>> add_integer(float("inf"))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer
	
Testing with both a and b as float
::
	>>> add_integer(3.89, 7.90)
	10

Testing with both floats as -ve
::
	>>> add_integer(-3.89, -7.90)
	-10

Testing with one float as negative
::
	>>> add_integer(7.90, -3.89)
	4

Testing with both as -ve integers
::
	>>> add_integer(-7, -4)
	-11
